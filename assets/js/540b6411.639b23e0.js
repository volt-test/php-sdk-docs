"use strict";(self.webpackChunkphp_sdk_docs=self.webpackChunkphp_sdk_docs||[]).push([[5882],{3630:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>n,toc:()=>c});var n=t(7660),i=t(4848),r=t(8453);const l={slug:"stress-testing-laravel-with-volt-test-web-ui",title:"Stress Testing Laravel Applications with VoltTest (Web UI Flow)",description:"This tutorial walks you through setting up and executing stress tests on a Laravel application using the VoltTest PHP SDK. You will learn how to simulate real user interactions such as visiting the home page, registering a new user, and accessing the dashboard, ensuring your application can handle concurrent traffic efficiently.",authors:["elwafa"],image:"/img/stress-test-php.png",tags:["laravel","performance-testing","load-testing","volt-test","stress-test"]},a="Introduction",o={authorsImageUrls:[void 0]},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installing VoltTest PHP SDK",id:"installing-volttest-php-sdk",level:2},{value:"Creating Test Data",id:"creating-test-data",level:2},{value:"Writing the Stress Test",id:"writing-the-stress-test",level:2},{value:"Code Explanation",id:"code-explanation",level:3},{value:"Running the Test",id:"running-the-test",level:2},{value:"Analyzing Results",id:"analyzing-results",level:2},{value:"Key Metrics:",id:"key-metrics",level:3},{value:"Common Issues &amp; Fixes",id:"common-issues--fixes",level:2},{value:"Low Success Rate",id:"low-success-rate",level:3},{value:"High Response Times",id:"high-response-times",level:3},{value:"CSRF Token Extraction Fails",id:"csrf-token-extraction-fails",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Get in Touch",id:"get-in-touch",level:2}];function h(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"In this tutorial, we will explore how to perform stress testing on a Laravel application using the VoltTest PHP SDK. You will learn how to:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Simulate multiple users interacting with your Laravel application."}),"\n",(0,i.jsx)(s.li,{children:"Test user registration and authentication workflows."}),"\n",(0,i.jsx)(s.li,{children:"Measure application performance under load."}),"\n",(0,i.jsx)(s.li,{children:"Extract dynamic values like CSRF tokens during test execution."}),"\n",(0,i.jsx)(s.li,{children:"Use a CSV file as a data source for testing."}),"\n",(0,i.jsx)(s.li,{children:"Analyze and optimize performance bottlenecks."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"By the end of this guide, you will be able to confidently run automated performance tests to ensure your Laravel app is scalable and resilient."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Stress Testing Laravel Applications with VoltTest",src:t(2092).A+"",width:"2600",height:"1482"})}),"\n",(0,i.jsx)(s.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(s.p,{children:"Ensure you have the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"A running Laravel application"}),"\n",(0,i.jsx)(s.li,{children:"PHP 8.0 or higher"}),"\n",(0,i.jsx)(s.li,{children:"Composer installed"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"installing-volttest-php-sdk",children:"Installing VoltTest PHP SDK"}),"\n",(0,i.jsx)(s.p,{children:"First, install the VoltTest PHP SDK via Composer in your Laravel project:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",metastring:'title="Terminal"',children:"composer require volt-test/php-sdk\n"})}),"\n",(0,i.jsx)(s.p,{children:"Or clone the repository:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",metastring:'title="Terminal"',children:"git clone https://github.com/volt-test/php-sdk.git\ncd php-sdk\ncomposer install\n"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["For ",(0,i.jsx)(s.em,{children:"Windows"})," users,"]})," Visit the installation guide ",(0,i.jsx)(s.a,{href:"https://php.volt-test.com/docs/installation#running-on-windows",children:"here"})]}),"\n",(0,i.jsx)(s.h2,{id:"creating-test-data",children:"Creating Test Data"}),"\n",(0,i.jsxs)(s.p,{children:["For a realistic test, create a CSV file (",(0,i.jsx)(s.code,{children:"users.csv"}),") with test user data:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csv",metastring:'title="users.csv"',children:"email,password\nuser1@example.com,password123\nuser2@example.com,password123\nuser3@example.com,password123\nuser4@example.com,password123\nuser5@example.com,password123\n"})}),"\n",(0,i.jsx)(s.p,{children:"Place this file in your project directory."}),"\n",(0,i.jsx)(s.h2,{id:"writing-the-stress-test",children:"Writing the Stress Test"}),"\n",(0,i.jsxs)(s.p,{children:["Create a file named ",(0,i.jsx)(s.code,{children:"laravel_stress_test.php"})," in your project root and add the following script (or you can use the laravel's command):"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"<?php\n\nrequire 'vendor/autoload.php';\n\nuse VoltTest\\DataSourceConfiguration;\nuse VoltTest\\VoltTest;\n\n// Define test\n$test = new VoltTest(\n'Laravel User Flow',\n'Tests home page visit, user registration, and dashboard access'\n);\n\n// Configure test parameters\n$test\n->setVirtualUsers(5)\n->setDuration('60s') // Optional: Set test duration\n->setRampUp('10s') // Optional: Set ramp-up time\n->setHttpDebug(true); // Enable HTTP debug logging for checking requests before sending the all requests\n\n// Create test scenario\n$userFlowScenario = $test->scenario('User Registration Flow')\n->autoHandleCookies(); // Automatically handle cookies without extract them\n\n// Set up data source\n$userFlowScenario->setDataSourceConfiguration(\nnew DataSourceConfiguration(__Dir__ . '/users.csv', 'unique', true) // Load data from CSV file, should be the full path\n);\n\n// Step 1: Visit home page\n$userFlowScenario->step('Visit Home Page')\n->get('http://localhost:8000')\n->header('Accept', 'text/html')\n->validateStatus('home_page_loaded', 200)\n->setThinkTime('2s');\n\n// Step 2: Visit register page and extract CSRF token\n$userFlowScenario->step('Visit Register Page')\n->get('http://localhost:8000/register')\n->header('Accept', 'text/html')\n->extractFromHtml('csrf_token', 'input[name=\"_token\"]', 'value')\n->validateStatus('register_page_loaded', 200)\n->setThinkTime('2s');\n\n// Step 3: Submit registration form\n$userFlowScenario->step('Submit Registration')\n->post(\n'http://localhost:8000/register',\n'_token=${csrf_token}&name=Test User&email=${email}&password=${password}&password_confirmation=${password}'\n)\n->header('Content-Type', 'application/x-www-form-urlencoded')\n->validateStatus('registration_successful', 302)\n->setThinkTime('1s');\n\n// Step 4: Access dashboard\n$userFlowScenario->step('Visit Dashboard')\n->get('http://localhost:8000/dashboard')\n->header('Accept', 'text/html')\n->validateStatus('dashboard_loaded', 200)\n->setThinkTime('3s');\n\n// Run test\n$result = $test->run(true); // true enables real-time progress output\n\n// Display results summary in case you turned off the real-time progress output\necho \"\\n\\nTest Results Summary:\\n\";\necho \"====================\\n\";\necho \"Total Requests: \" . $result->getTotalRequests() . \"\\n\";\necho \"Success Rate: \" . $result->getSuccessRate() . \"%\\n\";\necho \"Requests/second: \" . $result->getRequestsPerSecond() . \"\\n\";\necho \"Min Response Time: \" . $result->getMinResponseTime() . \"\\n\";\necho \"Max Response Time: \" . $result->getMaxResponseTime() . \"\\n\";\necho \"Avg Response Time: \" . $result->getAvgResponseTime() . \"\\n\";\necho \"P95 Response Time: \" . $result->getP95ResponseTime() . \"\\n\";\n"})}),"\n",(0,i.jsx)(s.h3,{id:"code-explanation",children:"Code Explanation"}),"\n",(0,i.jsx)(s.p,{children:"The stress test script simulates multiple users interacting with a Laravel web application. Here\u2019s how it works:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Initialize VoltTest"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$test = new VoltTest(\n'Laravel User Flow',\n'Tests home page visit, user registration, and dashboard access'\n);\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Creates a new test instance with a descriptive name."}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"2",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Configure test parameters"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$test\n->setVirtualUsers(5)\n->setDuration('60s')\n->setRampUp('10s')\n->setHttpDebug(true);\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"5 virtual users"}),": Simulate 5 concurrent users."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Running the test for 60 seconds"}),": Optional - you can remove this line to run the test and finish when all virtual users finish their scenarios."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Ramping up over 10 seconds"}),": Optional - you can remove this line to start all virtual users at the same time."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Enables HTTP debug logging"}),": Optional - Inspect requests while sending them."]}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"3",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Create a test scenario"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$userFlowScenario = $test->scenario('User Registration Flow')\n->autoHandleCookies();\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Creates a scenario for user registration flow."}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"autoHandleCookies()"}),": Automatically handles cookies without extracting them."]}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"4",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Set up data source"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$userFlowScenario->setDataSourceConfiguration(\nnew DataSourceConfiguration(__Dir__ . '/users.csv', 'unique', true)\n);\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Loads user data from ",(0,i.jsx)(s.code,{children:"users.csv"})," file. To simulate different users for each virtual user."]}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"5",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Define test steps"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$userFlowScenario->step('Visit Home Page')\n->get('http://localhost:8000')\n->header('Accept', 'text/html')\n->validateStatus('home_page_loaded', 200)\n->setThinkTime('2s');\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Visit Home Page"}),": Sends a GET request to the home page."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Accept header"}),": Optional - Specifies the expected response content type."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Validate Status"}),": Optional - Checks if the response status is 200."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Think Time"}),": Optional -  Simulates user thinking time before the next step, so the virtual user will wait 2s before execute the next request."]}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"6",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Extract CSRF token from registration page"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$userFlowScenario->step('Visit Register Page')\n->get('http://localhost:8000/register')\n->header('Accept', 'text/html')\n->extractFromHtml('csrf_token', 'input[name=\"_token\"]', 'value')\n->validateStatus('register_page_loaded', 200)\n->setThinkTime('2s');\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Visits the registration page."}),"\n",(0,i.jsxs)(s.li,{children:["Extracts the CSRF token from the HTML response. The token is stored in the variable ",(0,i.jsx)(s.code,{children:"${csrf_token}"}),".","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["The way to extract the token is by using the ",(0,i.jsx)(s.code,{children:"extractFromHtml"})," method, which takes the token name, the selector, and the attribute name."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"7",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Submit registration form"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$userFlowScenario->step('Submit Registration')\n->post(\n'http://localhost:8000/register',\n'_token=${csrf_token}&name=Test User&email=${email}&password=${password}&password_confirmation=${password}'\n)\n->header('Content-Type', 'application/x-www-form-urlencoded')\n->validateStatus('registration_successful', 302)\n->setThinkTime('1s');\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Submits the registration form with the extracted CSRF token and user data."}),"\n",(0,i.jsx)(s.li,{children:"Validates the response status code."}),"\n",(0,i.jsx)(s.li,{children:"Sets a 1-second think time before the next step."}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.code,{children:"${email}"})," and ",(0,i.jsx)(s.code,{children:"${password}"})," variables are replaced with values from the CSV file."]}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.code,{children:"${csrf_token}"})," variable is replaced with the extracted CSRF token."]}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.code,{children:"validateStatus"})," method checks if the response status is 302 (redirect)."]}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.code,{children:"setThinkTime"})," method simulates user thinking time before the next step."]}),"\n"]}),"\n",(0,i.jsxs)(s.ol,{start:"8",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Access dashboard"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$userFlowScenario->step('Visit Dashboard')\n->get('http://localhost:8000/dashboard')\n->header('Accept', 'text/html')\n->validateStatus('dashboard_loaded', 200)\n->setThinkTime('3s');\n"})}),"\n",(0,i.jsx)(s.p,{children:"Ensures successful login by verifying dashboard access."}),"\n",(0,i.jsxs)(s.ol,{start:"9",children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Run the test"}),":"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",metastring:'title="laravel_stress_test.php"',children:"$result = $test->run(true);\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Executes the test with real-time progress output."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"running-the-test",children:"Running the Test"}),"\n",(0,i.jsx)(s.p,{children:"Execute the script:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"php laravel_stress_test.php\n"})}),"\n",(0,i.jsx)(s.p,{children:"You'll see real-time progress, followed by a summary of test results."}),"\n",(0,i.jsx)(s.h2,{id:"analyzing-results",children:"Analyzing Results"}),"\n",(0,i.jsx)(s.h3,{id:"key-metrics",children:"Key Metrics:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Success Rate"}),": Should be as close to 100% as possible"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Response Times"}),": Lower is better"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Requests per Second"}),": Higher means better scalability"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"common-issues--fixes",children:"Common Issues & Fixes"}),"\n",(0,i.jsx)(s.h3,{id:"low-success-rate",children:"Low Success Rate"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Possible Cause"}),": Server overload"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Solution"}),": Reduce virtual users or optimize queries"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"high-response-times",children:"High Response Times"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Possible Cause"}),": Database bottlenecks"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Solution"}),": Optimize queries, enable caching"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"csrf-token-extraction-fails",children:"CSRF Token Extraction Fails"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Possible Cause"}),": HTML structure changes"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Solution"}),": Update the selector"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Expand tests to cover more user flows"}),"\n",(0,i.jsx)(s.li,{children:"Test with more virtual users"}),"\n",(0,i.jsx)(s.li,{children:"Automate stress tests in CI/CD pipelines"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(s.p,{children:"Using VoltTest for stress testing helps identify Laravel application bottlenecks before they impact users. Regular testing ensures scalability and reliability."}),"\n",(0,i.jsxs)(s.p,{children:["Stay tuned for our next guide on ",(0,i.jsx)(s.strong,{children:"Stress Testing Laravel APIs with VoltTest"}),"!"]}),"\n",(0,i.jsx)(s.p,{children:"Happy testing!"}),"\n",(0,i.jsx)(s.h2,{id:"get-in-touch",children:"Get in Touch"}),"\n",(0,i.jsxs)(s.p,{children:["For questions, discussions, or contributions, feel free to open an issue or start a discussion on the Volt-Test GitHub repository:\n",(0,i.jsx)(s.a,{href:"https://github.com/volt-test/php-sdk",children:"https://github.com/volt-test/php-sdk"})]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},2092:(e,s,t)=>{t.d(s,{A:()=>n});const n=t.p+"assets/images/stress-test-php-e8449f1b6e72fa9e2080c1ceccbae621.png"},8453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>a});var n=t(6540);const i={},r=n.createContext(i);function l(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:s},e.children)}},7660:e=>{e.exports=JSON.parse('{"permalink":"/blog/stress-testing-laravel-with-volt-test-web-ui","editUrl":"https://github.com/volt-test/php-sdk-docs/tree/main/blog/2025-02-28-stress-testing-laravel-with-volt-test-web-ui/index.md","source":"@site/blog/2025-02-28-stress-testing-laravel-with-volt-test-web-ui/index.md","title":"Stress Testing Laravel Applications with VoltTest (Web UI Flow)","description":"This tutorial walks you through setting up and executing stress tests on a Laravel application using the VoltTest PHP SDK. You will learn how to simulate real user interactions such as visiting the home page, registering a new user, and accessing the dashboard, ensuring your application can handle concurrent traffic efficiently.","date":"2025-02-28T00:00:00.000Z","tags":[{"inline":false,"label":"Laravel","permalink":"/blog/tags/laravel","description":"Articles about Laravel development."},{"inline":false,"label":"Performance Testing","permalink":"/blog/tags/performance-testing","description":"Guides and tools for performance testing."},{"inline":false,"label":"Load Testing","permalink":"/blog/tags/load-testing","description":"Resources for testing application load performance."},{"inline":false,"label":"Volt-Test","permalink":"/blog/tags/volt-test","description":"Guides and tutorials about Volt-Test."},{"inline":false,"label":"Stress Test","permalink":"/blog/tags/stress-test","description":"Articles related to stress testing applications."}],"readingTime":5.8,"hasTruncateMarker":true,"authors":[{"name":"Islam A-Elwafa","title":"Software Engineer","url":"https://github.com/elwafa","page":{"permalink":"/blog/authors/elwafa"},"socials":{"x":"https://x.com/elwafa90","github":"https://github.com/elwafa"},"imageURL":"https://github.com/elwafa.png","key":"elwafa"}],"frontMatter":{"slug":"stress-testing-laravel-with-volt-test-web-ui","title":"Stress Testing Laravel Applications with VoltTest (Web UI Flow)","description":"This tutorial walks you through setting up and executing stress tests on a Laravel application using the VoltTest PHP SDK. You will learn how to simulate real user interactions such as visiting the home page, registering a new user, and accessing the dashboard, ensuring your application can handle concurrent traffic efficiently.","authors":["elwafa"],"image":"/img/stress-test-php.png","tags":["laravel","performance-testing","load-testing","volt-test","stress-test"]},"unlisted":false,"nextItem":{"title":"Introducing Volt-Test: Stress & Load Testing for PHP Developers","permalink":"/blog/introducing-volt-test-php-load-testing"}}')}}]);