"use strict";(self.webpackChunkphp_sdk_docs=self.webpackChunkphp_sdk_docs||[]).push([[214],{8469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Examples/JSON-API-Examples","title":"JSON API Examples","description":"In this section, we\'ll cover some examples of testing JSON APIs using VoltTest PHP SDK.","source":"@site/docs/Examples/json_api_examples.md","sourceDirName":"Examples","slug":"/Examples/JSON-API-Examples","permalink":"/docs/Examples/JSON-API-Examples","draft":false,"unlisted":false,"editUrl":"https://github.com/volt-test/php-sdk-docs/tree/main/docs/Examples/json_api_examples.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"JSON-API-Examples","title":"JSON API Examples"},"sidebar":"tutorialSidebar","previous":{"title":"HTML Form Examples","permalink":"/docs/Examples/html-form-examples"}}');var a=n(4848),i=n(8453);const r={sidebar_position:1,id:"JSON-API-Examples",title:"JSON API Examples"},o="JSON API Examples",l={},c=[{value:"Authentication API Testing",id:"authentication-api-testing",level:2},{value:"CRUD Operations",id:"crud-operations",level:2},{value:"Data Driven API Testing",id:"data-driven-api-testing",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"json-api-examples",children:"JSON API Examples"})}),"\n",(0,a.jsx)(t.p,{children:"In this section, we'll cover some examples of testing JSON APIs using VoltTest PHP SDK."}),"\n",(0,a.jsx)(t.p,{children:"Ex:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"#authentication-api-testing",children:"API Authentication Testing"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Test an API that requires authentication"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"#crud-operations",children:"CRUD Operations"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Test a JSON API that supports CRUD operations"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"#data-driven-api-testing",children:"Data Driven API Testing"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Test an API with different sets of data from a CSV file"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"authentication-api-testing",children:"Authentication API Testing"}),"\n",(0,a.jsx)(t.p,{children:"Authentication is a common use case for APIs. In this example, we'll test an authentication API that requires a login request to get an access token and then use that token in subsequent requests."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-php",children:"$test = new VoltTest('API Authentication Test');\n$test->setVirtualUsers(10);\n\n$scenario = $test->scenario('API Authentication');\n\n// Login Request\n$scenario->step('Login')\n    ->post('https://api.example.com/auth/login', json_encode([\n        'email' => 'some@mail.com',\n        'password' => 'secret' \n    ]))\n    ->header('Content-Type', 'application/json')\n    ->validateStatus('login_success', 200)\n    ->extractFromJson('access_token', 'data.token');\n\n// Use Token in Subsequent Requests\n$scenario->step('Get Profile')\n    ->get('https://api.example.com/profile')\n    ->header('Authorization', 'Bearer ${access_token}')\n    ->validateStatus('profile_success', 200);\n\n// Run the test and get the result\n$result = $test->run();\n\necho $result->getRawOutput();\n"})}),"\n",(0,a.jsx)(t.p,{children:'In the example above, we create a new test named "API Authentication Test"\nand set the number of virtual users to 10. We then create a scenario named "API Authentication"\nand add two steps to it.\nThe first step sends a POST request to the login endpoint with the email and password,\nvalidates the login success status, and extracts the access token from the JSON response.\nThe second step sends a GET request to the profile endpoint with the access token\nin the Authorization header and validates the profile success status.'}),"\n",(0,a.jsx)(t.h2,{id:"crud-operations",children:"CRUD Operations"}),"\n",(0,a.jsx)(t.p,{children:"CRUD (Create, Read, Update, Delete) operations are fundamental to APIs.\nIn this example, we'll test a JSON API that supports CRUD operations for managing users."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-php",children:"$test = new VoltTest('CRUD Operations Test');\n$test->setVirtualUsers(100);\n$test->setDuration('1m');\n\n$scenario = $test->scenario('CRUD Operations');\n\n// Create\n$scenario->step('Create User')\n    ->post('https://api.example.com/users', json_encode([\n        'name' => 'John Doe',\n        'email' => 'some@mail.com',\n        'role' => 'user',\n    ]))\n    ->header('Content-Type', 'application/json')\n    ->validateStatus('creation_success', 201)\n    ->extractFromJson('user_id', 'data.id');\n\n// Read\n$scenario->step('Get User')\n    ->get('https://api.example.com/users/${user_id}')\n    ->validateStatus('read_success', 200);\n\n// Update\n$scenario->step('Update User')\n    ->put('https://api.example.com/users/${user_id}', json_encode([\n        'name' => 'Jane Doe',\n        'email' => 'update@mail.com',\n    ]))\n    ->header('Content-Type', 'application/json')\n    ->validateStatus('update_success', 200);\n\n// Delete\n$scenario->step('Delete User')\n    ->delete('https://api.example.com/users/${user_id}')\n    ->validateStatus('delete_success', 204);\n\n// Run the test and get the result\n$result = $test->run();\n\necho $result->getRawOutput();\n"})}),"\n",(0,a.jsx)(t.p,{children:'In the example above, we create a new test named "CRUD Operations Test"\nand set the number of virtual users to 100 and the test duration to 1 minute.\nWe then create a scenario named "CRUD Operations" and add four steps to it.\nThe first step sends a POST request to create a new user, validates the creation success status,\nand extracts the user ID from the JSON response.\nThe second step sends a GET request to retrieve the user details.\nThe third step sends a PUT request to update the user details,\nand the fourth step sends a DELETE request to delete the user.'}),"\n",(0,a.jsx)(t.h2,{id:"data-driven-api-testing",children:"Data Driven API Testing"}),"\n",(0,a.jsx)(t.p,{children:"Data-driven testing involves running the same test scenario with different sets of data.\nIn this example, we'll test an API that requires different user data for registration."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-php",children:"$test = new VoltTest('Data-Driven API Test');\n$test->setVirtualUsers(50);\n\n// Configure data source\n$dataConfig = new DataSourceConfiguration(\n    __DIR__ . '/test_users.csv',    // CSV with test data\n    'random',            // Random selection\n    true                 // Has header row\n);\n\n$scenario = $test->scenario('Registration Test')\n    ->setDataSourceConfiguration($dataConfig);\n\n// Registration process using data from CSV\n$scenario->step('Submit Registration')\n    ->post('https://api.example.com/register', json_encode([\n        'name' => '${name}',\n        'email' => '${email}',\n        'phone' => '${phone}',\n    ]))\n    ->header('Content-Type', 'application/json')\n    ->validateStatus('registration_success', 200);\n\n// Run the test and get the result\n$result = $test->run();\necho $result->getRawOutput();\n"})}),"\n",(0,a.jsx)(t.p,{children:'In the example above, we create a new test named "Data-Driven API Test"\nand set the number of virtual users to 50. We then configure a data source\nusing a CSV file with test data and set it to random selection.\nWe create a scenario named "Registration Test" and set the data source configuration.\nThe scenario step submits the registration form using data from the CSV file\nand validates the registration success status.'}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"The CSV file should have columns for name, email, and phone with corresponding values for each test case."})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);